{
  "version": 3,
  "sources": ["../app.js"],
  "sourcesContent": ["// --- SUPABASE INITIALIZATION ---\n// IMPORTANT: Replace with your Supabase project's URL and anon key.\n// You can find these in your Supabase project settings under API.\nconst supabaseUrl = 'https://acysegqhxdjhlhjotlhv.supabase.co';\nconst supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImFjeXNlZ3FoeGRqaGxoam90bGh2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTY3ODIzOTIsImV4cCI6MjA3MjM1ODM5Mn0.xYEIA_QPaaYJxGfuWzGDehrxJjETTR4A5T3votJb_8I';\n\n// The global 'supabase' object is from the CDN script. We use it to create our own client instance.\nconst supabaseClient = supabase.createClient(supabaseUrl, supabaseAnonKey);\n\nconsole.log(\"Supabase initialized.\");\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    // --- STATE ---\n    let state = {\n        currentUser: null, // Will hold { user: AuthUser, profile: ProfileData }\n        items: [], // Will be populated from Supabase\n        favorites: [], // Will be populated from user's profile\n        sellFormFiles: [], // Holds files for the sell form\n        currentView: 'home',\n    };\n\n    // --- DOM SELECTORS ---\n    const DOMElements = {\n        // Views\n        homeView: document.getElementById('homeView'),\n        loginForm: document.getElementById('loginForm'),\n        sellForm: document.getElementById('sellForm'),\n        myAdsView: document.getElementById('myAdsView'),\n        favoritesView: document.getElementById('favoritesView'),\n        adminView: document.getElementById('adminView'),\n        importCreditsForm: document.getElementById('importCreditsForm'),\n        \n        // Auth\n        userSection: document.getElementById('userSection'),\n        loginSection: document.getElementById('loginSection'),\n        showLoginBtn: document.getElementById('showLoginBtn'),\n        logoutBtn: document.getElementById('logoutBtn'),\n        welcomeText: document.getElementById('welcomeText'),\n        creditsDisplay: document.getElementById('creditsDisplay'),\n        loginTitle: document.getElementById('loginTitle'),\n        loginName: document.getElementById('loginName'),\n        loginEmail: document.getElementById('loginEmail'),\n        loginPhone: document.getElementById('loginPhone'),\n        loginRegion: document.getElementById('loginRegion'),\n        loginPassword: document.getElementById('loginPassword'),\n        loginSubmit: document.getElementById('loginSubmit'),\n        loginToggleBtn: document.getElementById('loginToggleBtn'),\n        loginToggleText: document.getElementById('loginToggleText'),\n        registerNote: document.getElementById('registerNote'),\n        passwordGroup: document.getElementById('passwordGroup'),\n\n        // Navigation Buttons\n        homeBtn: document.getElementById('homeBtn'),\n        sellBtn: document.getElementById('sellBtn'),\n        myAdsBtn: document.getElementById('myAdsBtn'),\n        favBtn: document.getElementById('favBtn'),\n        adminBtn: document.getElementById('adminBtn'),\n        navButtons: document.querySelectorAll('.nav-btn'),\n\n        // Sell Form\n        submitBtn: document.getElementById('submitBtn'),\n        itemTitle: document.getElementById('itemTitle'),\n        itemPrice: document.getElementById('itemPrice'),\n        itemCategory: document.getElementById('itemCategory'),\n        itemDescription: document.getElementById('itemDescription'),\n        itemLocation: document.getElementById('itemLocation'),\n        itemWhatsApp: document.getElementById('itemWhatsApp'),\n        previewSection: document.getElementById('previewSection'),\n        remainingCredits: document.getElementById('remainingCredits'),\n        noCreditsMsg: document.getElementById('noCreditsMsg'),\n\n        // Home View\n        itemsGrid: document.getElementById('itemsGrid'),\n        noItemsMsg: document.getElementById('noItemsMsg'),\n        itemCount: document.getElementById('itemCount'),\n        showingCount: document.getElementById('showingCount'),\n        totalCount: document.getElementById('totalCount'),\n\n        // Favorites\n        favCount: document.getElementById('favCount'),\n        favoritesCount: document.getElementById('favoritesCount'),\n        favoritesGrid: document.getElementById('favoritesGrid'),\n        noFavoritesMsg: document.getElementById('noFavoritesMsg'),\n\n        // Import Credits\n        importCreditsBtn: document.getElementById('importCreditsBtn'),\n\n        // Search and Filter\n        searchInput: document.getElementById('searchInput'),\n        categoryFilter: document.getElementById('categoryFilter'),\n    };\n\n    const views = [\n        DOMElements.homeView, DOMElements.loginForm, DOMElements.sellForm,\n        DOMElements.myAdsView, DOMElements.favoritesView, DOMElements.adminView,\n        DOMElements.importCreditsForm\n    ];\n\n    // --- RENDER & UI FUNCTIONS ---\n\n    const navigateTo = (view) => {\n        state.currentView = view;\n        views.forEach(v => v.classList.add('hidden'));\n        DOMElements.navButtons.forEach(b => b.classList.remove('active'));\n\n        let targetView;\n        let activeBtn;\n\n        switch (view) {\n            case 'login':\n                targetView = DOMElements.loginForm;\n                // Reset login form state when navigating to it\n                DOMElements.loginEmail.value = '';\n                DOMElements.loginPhone.value = '';\n                DOMElements.loginPassword.value = '';\n                // OTP logic removed\n                DOMElements.loginSubmit.classList.remove('hidden');\n                DOMElements.loginEmail.type = 'email';\n                DOMElements.loginEmail.placeholder = 'Email';\n                break;\n            case 'sell':\n                targetView = DOMElements.sellForm;\n                activeBtn = DOMElements.sellBtn;\n                updateSellFormUI();\n                break;\n            case 'myAds':\n                targetView = DOMElements.myAdsView;\n                activeBtn = DOMElements.myAdsBtn;\n                break;\n            case 'favorites':\n                targetView = DOMElements.favoritesView;\n                activeBtn = DOMElements.favBtn;\n                renderFavorites();\n                break;\n            case 'admin':\n                targetView = DOMElements.adminView;\n                activeBtn = DOMElements.adminBtn;\n                break;\n            case 'importCredits':\n                targetView = DOMElements.importCreditsForm;\n                break;\n            case 'home':\n            default:\n                targetView = DOMElements.homeView;\n                activeBtn = DOMElements.homeBtn;\n                fetchAndRenderItems();\n                break;\n        }\n\n        if (targetView) targetView.classList.remove('hidden');\n        if (activeBtn) activeBtn.classList.add('active');\n        window.scrollTo(0, 0);\n    };\n\n    const updateAuthUI = () => {\n        if (state.currentUser && state.currentUser.profile) {\n            DOMElements.userSection.classList.remove('hidden');\n            DOMElements.loginSection.classList.add('hidden');\n            DOMElements.welcomeText.textContent = `Welcome, ${state.currentUser.profile.username}`;\n            DOMElements.sellBtn.classList.remove('hidden');\n            DOMElements.myAdsBtn.classList.remove('hidden');\n\n            if (state.currentUser.profile.is_admin) {\n                DOMElements.creditsDisplay.textContent = 'Unlimited Credits';\n                DOMElements.adminBtn.classList.remove('hidden');\n            } else {\n                DOMElements.creditsDisplay.textContent = `${state.currentUser.profile.listing_credits} Credits`;\n                DOMElements.adminBtn.classList.add('hidden');\n            }\n        } else {\n            DOMElements.userSection.classList.add('hidden');\n            DOMElements.loginSection.classList.remove('hidden');\n            DOMElements.sellBtn.classList.add('hidden');\n            DOMElements.myAdsBtn.classList.add('hidden');\n            DOMElements.adminBtn.classList.add('hidden');\n        }\n    };\n\n    const renderItems = (itemsToRender) => {\n        DOMElements.itemsGrid.innerHTML = '';\n        if (itemsToRender.length === 0) {\n            DOMElements.noItemsMsg.classList.remove('hidden');\n        } else {\n            DOMElements.noItemsMsg.classList.add('hidden');\n        }\n\n        DOMElements.itemCount.textContent = itemsToRender.length;\n        DOMElements.showingCount.textContent = itemsToRender.length;\n        // For a full app, totalCount might require a separate count query\n        DOMElements.totalCount.textContent = itemsToRender.length; \n\n        itemsToRender.forEach(item => {\n            const isFavorite = state.favorites.includes(item.id);\n            const itemCard = document.createElement('div');\n            itemCard.className = 'card item-card';\n            itemCard.dataset.id = item.id;\n            itemCard.innerHTML = `\n                <img src=\"${item.images && item.images.length > 0 ? item.images[0] : 'https://placehold.co/300x200?text=No+Image'}\" alt=\"${item.title}\" class=\"item-image\">\n                <div class=\"item-content\">\n                    <div class=\"item-meta\">\n                        <span class=\"category-badge\">${item.category}</span>\n                        <span class=\"text-xs text-gray-500\">${new Date(item.posted_at).toLocaleDateString()}</span>\n                    </div>\n                    <h3 class=\"item-title\">${item.title}</h3>\n                    <p class=\"item-description\">${item.description}</p>\n                </div>\n                <div class=\"item-footer\">\n                    <div class=\"item-price\">GHS ${item.price}</div>\n                    <div class=\"item-actions\">\n                        <a href=\"https://wa.me/${item.whatsapp.replace('+', '')}?text=Hi, I'm interested in your '${item.title}' on Ghana Market.\" target=\"_blank\" class=\"btn btn-sm btn-primary\">\n                            <i data-lucide=\"message-circle\"></i><span>WhatsApp</span>\n                        </a>\n                        <button class=\"btn btn-sm btn-secondary favorite-toggle-btn\">\n                            <i data-lucide=\"heart\" ${isFavorite ? 'fill=\"red\"' : ''}></i>\n                        </button>\n                    </div>\n                </div>\n            `;\n            DOMElements.itemsGrid.appendChild(itemCard);\n        });\n        lucide.createIcons();\n    };\n    \n    const updateFavoritesCount = () => {\n        const count = state.favorites.length;\n        DOMElements.favCount.textContent = count;\n        if (DOMElements.favoritesCount) DOMElements.favoritesCount.textContent = count;\n    };\n\n    const toggleFavorite = async (itemId) => {\n        if (!state.currentUser) {\n            alert('Please login to add items to your favorites.');\n            navigateTo('login');\n            return;\n        }\n\n        const favIndex = state.favorites.indexOf(itemId);\n        let updatedFavorites = [...state.favorites];\n\n        if (favIndex > -1) {\n            updatedFavorites.splice(favIndex, 1);\n        } else {\n            updatedFavorites.push(itemId);\n        }\n\n        try {\n            const { error } = await supabaseClient.from('profiles').update({ favorites: updatedFavorites }).eq('id', state.currentUser.user.id);\n            if (error) throw error;\n            state.favorites = updatedFavorites; // Update local state on success\n            state.currentUser.profile.favorites = updatedFavorites;\n        } catch (error) {\n            console.error(\"Error updating favorites:\", error);\n            alert(\"Could not update favorites. Please try again.\");\n            return; // Stop if the DB update fails\n        }\n\n        updateFavoritesCount();\n        \n        // Re-render current view to update heart icon\n        if (state.currentView === 'home') fetchAndRenderItems(); // Re-fetch to ensure consistency\n        if (state.currentView === 'favorites') renderFavorites();\n    };\n\n    const renderFavorites = async () => {\n        if (!state.favorites || state.favorites.length === 0) {\n            DOMElements.favoritesGrid.innerHTML = '';\n            DOMElements.noFavoritesMsg.classList.remove('hidden');\n            return;\n        }\n\n        DOMElements.noFavoritesMsg.classList.add('hidden');\n        DOMElements.favoritesGrid.innerHTML = 'Loading favorites...';\n\n        const { data: favoriteItems, error } = await supabaseClient\n            .from('items')\n            .select('*')\n            .in('id', state.favorites);\n\n        if (error) {\n            console.error('Error fetching favorite items:', error);\n            DOMElements.favoritesGrid.innerHTML = '<p class=\"text-red-500\">Could not load favorites.</p>';\n            return;\n        }\n        \n        // Use the main render function\n        renderItems(favoriteItems);\n    };\n\n    // --- HANDLERS ---\n\n    const handleSellFormSubmit = async (e) => {\n        e.preventDefault();\n        if (!state.currentUser) {\n            alert(\"You must be logged in to sell an item.\");\n            return;\n        }\n\n        const title = DOMElements.itemTitle.value.trim();\n        const price = parseFloat(DOMElements.itemPrice.value);\n        const category = DOMElements.itemCategory.value;\n        const description = DOMElements.itemDescription.value.trim();\n        const location = DOMElements.itemLocation.value.trim();\n        const whatsapp = DOMElements.itemWhatsApp.value.trim();\n\n        // 1. Get form data\n        const deliveryType = document.querySelector('input[name=\"deliveryType\"]:checked').value;\n\n        // 2. Validate data\n        if (!title || !price || !category || !description || !location || !whatsapp) {\n            alert(\"Please fill out all required fields.\");\n            return;\n        }\n        if (state.sellFormFiles.length === 0) {\n            alert(\"Please upload at least one image for your item.\");\n            return;\n        }\n\n        // 3. Disable button and show loading state\n        DOMElements.submitBtn.disabled = true;\n        DOMElements.submitBtn.innerHTML = `<i data-lucide=\"loader-2\" class=\"animate-spin\"></i><span>Uploading...</span>`;\n        lucide.createIcons();\n\n        try {\n            // 4. Upload files to Supabase Storage\n            const uploadPromises = state.sellFormFiles.map(file => {\n                const fileName = `${Date.now()}-${file.name}`;\n                const filePath = `${state.currentUser.user.id}/${fileName}`;\n                return supabaseClient.storage.from('item-images').upload(filePath, file);\n            });\n            const uploadResults = await Promise.all(uploadPromises);\n\n            // Check for upload errors\n            const uploadErrors = uploadResults.filter(res => res.error);\n            if (uploadErrors.length > 0) {\n                throw new Error(`Image upload failed: ${uploadErrors[0].error.message}`);\n            }\n\n            // 5. Get public URLs for each uploaded file\n            const downloadURLs = uploadResults.map(res => {\n                const { data } = supabaseClient.storage.from('item-images').getPublicUrl(res.data.path);\n                return data.publicUrl;\n            });\n\n            // 6. Create the item object to save in Supabase\n            const newItemData = {\n                title,\n                price,\n                category,\n                description,\n                location,\n                whatsapp,\n                delivery: deliveryType,\n                images: downloadURLs,\n                seller_id: state.currentUser.user.id,\n                // posted_at is handled by the database (default now())\n                status: 'active' // or 'pending_approval'\n            };\n\n            // 7. Insert the new item into the 'items' table\n            const { error: insertError } = await supabaseClient.from('items').insert([newItemData]);\n            if (insertError) throw insertError;\n\n            // 8. Success\n            alert(\"Item listed successfully!\");\n            resetSellForm();\n            navigateTo('home');\n        } catch (error) {\n            console.error(\"Error listing item:\", error);\n            alert(`There was an error listing your item: ${error.message}`);\n        } finally {\n            // 11. Re-enable button\n            DOMElements.submitBtn.disabled = false;\n            DOMElements.submitBtn.innerHTML = `<i data-lucide=\"plus-circle\"></i><span>List Item (1 Credit)</span>`;\n            lucide.createIcons();\n        }\n    };\n\n    const resetSellForm = () => {\n        DOMElements.sellForm.querySelector('form')?.reset(); // If you wrap it in a form\n        state.sellFormFiles = [];\n        DOMElements.previewSection.innerHTML = '';\n    };\n\n    const updateSellFormUI = () => {\n        if (!state.currentUser) return;\n\n        if (state.currentUser.profile?.is_admin) {\n            DOMElements.remainingCredits.textContent = 'Unlimited';\n            DOMElements.noCreditsMsg.classList.add('hidden');\n            DOMElements.submitBtn.disabled = false;\n        } else {\n            const credits = state.currentUser.profile?.listing_credits || 0;\n            DOMElements.remainingCredits.textContent = credits.toString();\n            if (credits > 0) {\n                DOMElements.noCreditsMsg.classList.add('hidden');\n                DOMElements.submitBtn.disabled = false;\n            } else {\n                DOMElements.noCreditsMsg.classList.remove('hidden');\n                DOMElements.submitBtn.disabled = true;\n            }\n        }\n    };\n\n    const handleAuthFormToggle = (isRegister) => {\n        if (isRegister) {\n            DOMElements.loginTitle.textContent = 'Create Account';\n            DOMElements.loginName.classList.remove('hidden');\n            DOMElements.loginRegion.classList.remove('hidden');\n            DOMElements.registerNote.classList.remove('hidden');\n            DOMElements.loginSubmit.textContent = 'Register';\n            DOMElements.loginToggleText.textContent = 'Already have an account?';\n            DOMElements.loginToggleBtn.textContent = 'Login';\n            DOMElements.loginEmail.type = 'email'; // Ensure email field is email type for register\n            DOMElements.loginEmail.placeholder = 'Email';\n            DOMElements.loginPhone.classList.remove('hidden'); // Show phone for register\n            DOMElements.passwordGroup.classList.remove('hidden'); // Show password for register\n            DOMElements.loginSubmit.classList.remove('hidden'); // Show register button\n        } else {\n            DOMElements.loginTitle.textContent = 'Welcome Back';\n            DOMElements.loginName.classList.add('hidden');\n            DOMElements.loginRegion.classList.add('hidden');\n            DOMElements.registerNote.classList.add('hidden');\n            DOMElements.loginSubmit.textContent = 'Login';\n            DOMElements.loginToggleText.textContent = \"Don't have an account?\";\n            DOMElements.loginToggleBtn.textContent = 'Register';\n            DOMElements.loginPhone.classList.add('hidden'); // Hide phone for login initially\n            DOMElements.loginEmail.type = 'email';\n            DOMElements.loginEmail.placeholder = 'Email';\n        }\n    };\n    \n    const handleLogout = async () => {\n        try {\n            console.log('Logging out with Supabase...');\n            const { error } = await supabaseClient.auth.signOut();\n            // The onAuthStateChanged listener will handle UI updates and navigation.\n            if (error) throw error;\n        } catch (error) {\n            alert(`Logout failed: ${error.message}`);\n        }\n    };\n\n    const handleForgotPassword = async () => {\n        const email = prompt(\"Please enter your email address to reset your password:\");\n        if (!email) return;\n\n        try {\n            const { error } = await supabaseClient.auth.resetPasswordForEmail(email, {\n                redirectTo: window.location.origin + '/update-password', // You'll need a page at this path\n            });\n            if (error) throw error;\n            alert(\"Password reset email sent! Please check your inbox.\");\n        } catch (error) {\n            alert(`Error sending password reset email: ${error.message}`);\n        }\n    };\n    \n    const fetchAndRenderItems = async () => {\n        const searchTerm = DOMElements.searchInput.value.toLowerCase();\n        const category = DOMElements.categoryFilter.value;\n\n        try {\n            let query = supabaseClient.from('items').select('*').order('posted_at', { ascending: false });\n\n            if (category !== 'all') {\n                query = query.eq('category', category);\n            }\n            \n            const { data: items, error } = await query;\n            if (error) throw error;\n\n            let filteredItems = items;\n            // Client-side search filtering after fetching\n            if (searchTerm) {\n                filteredItems = items.filter(item => \n                    item.title.toLowerCase().includes(searchTerm) || \n                    item.description.toLowerCase().includes(searchTerm)\n                );\n            }\n\n            state.items = filteredItems;\n            renderItems(state.items);\n        } catch (error) {\n            console.error(\"Error fetching items:\", error);\n            DOMElements.itemsGrid.innerHTML = `<p class=\"text-center text-red-500\">Could not load items. Please try again later.</p>`;\n        }\n    };\n\n    const handleLogin = async () => {\n        const email = DOMElements.loginEmail.value.trim();\n        const password = DOMElements.loginPassword.value.trim();\n\n        if (!email || !password) {\n            alert('Please enter both email and password.');\n            return;\n        }\n\n        try {\n            const { error } = await supabaseClient.auth.signInWithPassword({\n                email: email,\n                password: password,\n            });\n\n            if (error) throw error;\n            // onAuthStateChange will handle the rest\n            navigateTo('home');\n        } catch (error) {\n            alert(`Login failed: ${error.message}`);\n        }\n    };\n\n    const handleRegister = async () => {\n        const email = DOMElements.loginEmail.value.trim();\n        const password = DOMElements.loginPassword.value.trim();\n        const name = DOMElements.loginName.value.trim();\n        const phone = DOMElements.loginPhone.value.trim();\n        const region = DOMElements.loginRegion.value;\n\n        if (!email || !password || !name || !phone || !region) {\n            alert('Please fill out all fields for registration.');\n            return;\n        }\n\n        try {\n            const { data, error } = await supabaseClient.auth.signUp({\n                email: email,\n                password: password,\n                options: {\n                    data: {\n                        username: name,\n                        phone: phone,\n                        region: region,\n                    }\n                }\n            });\n\n            if (error) throw error;\n\n            if (data.user?.identities?.length === 0) {\n                alert(`Could not register user. A user with this email may already exist and is unconfirmed.`);\n            } else {\n                alert('Registration successful! Please check your email to confirm your account.');\n                handleAuthFormToggle(false); // Switch to login view\n            }\n        } catch (error) {\n            alert(`Registration failed: ${error.message}`);\n        }\n    };\n\n    // --- EVENT LISTENERS ---\n    \n    // Navigation\n    DOMElements.showLoginBtn.addEventListener('click', () => navigateTo('login'));\n    DOMElements.homeBtn.addEventListener('click', () => navigateTo('home'));\n    DOMElements.sellBtn.addEventListener('click', () => navigateTo('sell'));\n    DOMElements.myAdsBtn.addEventListener('click', () => navigateTo('myAds'));\n    DOMElements.favBtn.addEventListener('click', () => navigateTo('favorites'));\n    DOMElements.adminBtn.addEventListener('click', () => navigateTo('admin'));\n    DOMElements.submitBtn.addEventListener('click', handleSellFormSubmit);\n    DOMElements.importCreditsBtn.addEventListener('click', () => navigateTo('importCredits'));\n\n    // Auth\n    DOMElements.logoutBtn.addEventListener('click', handleLogout);\n    DOMElements.loginToggleBtn.addEventListener('click', () => {\n        const isRegistering = DOMElements.loginSubmit.textContent === 'Login';\n        handleAuthFormToggle(isRegistering);\n    });\n    DOMElements.loginSubmit.addEventListener('click', (e) => {\n        e.preventDefault();\n        if (DOMElements.loginSubmit.textContent === 'Login') {\n            handleLogin();\n        } else {\n            handleRegister();\n        }\n    });\n    // DOMElements.forgotPasswordLink.addEventListener('click', (e) => {\n    //     e.preventDefault();\n    //     handleForgotPassword();\n    // });\n\n    // Filtering\n    DOMElements.searchInput.addEventListener('input', fetchAndRenderItems);\n    DOMElements.categoryFilter.addEventListener('change', fetchAndRenderItems);\n\n    // Item Actions (Event Delegation)\n    document.body.addEventListener('click', (e) => {\n        const favButton = e.target.closest('.favorite-toggle-btn');\n        if (favButton) {\n            const itemCard = favButton.closest('.item-card');\n            if (itemCard) {\n                toggleFavorite(itemCard.dataset.id);\n            }\n        }\n    });\n\n    // --- INITIALIZATION ---\n    const init = () => {\n        // Initialize Supabase Auth listener to handle session management\n        supabaseClient.auth.onAuthStateChange(async (event, session) => {\n            const user = session?.user || null;\n\n            if (user) {\n                console.log('Auth state changed: User signed in ->', user.id);\n                const { data: profile, error } = await supabaseClient.from('profiles').select('*').eq('id', user.id).single();\n\n                if (error && error.code !== 'PGRST116') { // PGRST116 means 0 rows found\n                    console.error('Error fetching user profile:', error);\n                    state.currentUser = null;\n                    state.favorites = [];\n                } else if (profile) {\n                    state.currentUser = { user, profile };\n                    state.favorites = profile.favorites || [];\n                } else {\n                    // Profile doesn't exist, let's create one as a fallback.\n                    // Best practice is a DB trigger in Supabase.\n                    console.warn(\"Profile not found, creating one as a fallback.\");\n                    const { data: newProfile, error: createError } = await supabaseClient\n                        .from('profiles')\n                        .insert([{ \n                            id: user.id, \n                            username: user.user_metadata.username || 'New User'\n                        }])\n                        .select().single();\n                    \n                    if (createError) {\n                        console.error(\"Error creating user profile:\", createError);\n                        state.currentUser = { user, profile: null };\n                        state.favorites = [];\n                    } else {\n                        state.currentUser = { user, profile: newProfile };\n                        state.favorites = newProfile.favorites || [];\n                    }\n                }\n            } else {\n                // User is signed out.\n                console.log('Auth state changed: User signed out.');\n                state.currentUser = null;\n                state.favorites = [];\n            }\n            // Update UI based on the new auth state\n            updateAuthUI();\n            // Navigate to home, which will re-render items\n            if (state.currentView !== 'login' && state.currentView !== 'register') {\n                 navigateTo('home');\n            }\n        });\n\n        // Initial render on page load\n        navigateTo('home');\n        lucide.createIcons();\n    };\n\n    init();\n});"],
  "mappings": "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",
  "names": ["supabaseUrl", "supabaseAnonKey", "supabaseClient", "state", "DOMElements", "views", "navigateTo", "view", "v", "b", "targetView", "activeBtn", "updateSellFormUI", "renderFavorites", "fetchAndRenderItems", "updateAuthUI", "renderItems", "itemsToRender", "item", "isFavorite", "itemCard", "updateFavoritesCount", "count", "toggleFavorite", "itemId", "favIndex", "updatedFavorites", "error", "favoriteItems", "handleSellFormSubmit", "e", "title", "price", "category", "description", "location", "whatsapp", "deliveryType", "uploadPromises", "file", "fileName", "filePath", "uploadResults", "uploadErrors", "res", "downloadURLs", "data", "newItemData", "insertError", "resetSellForm", "credits", "handleAuthFormToggle", "isRegister", "handleLogout", "handleForgotPassword", "email", "searchTerm", "query", "items", "filteredItems", "handleLogin", "password", "handleRegister", "name", "phone", "region", "isRegistering", "favButton", "event", "session", "user", "profile", "newProfile", "createError"]
}
